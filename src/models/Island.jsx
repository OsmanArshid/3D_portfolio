/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: nimzu (https://sketchfab.com/nimzuk)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/foxs-islands-163b68e09fcc47618450150be7785907
Title: Fox's islands
*/

import { useRef, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useFrame, useThree } from '@react-three/fiber'
import {a} from '@react-spring/three'

import IslandScene from '../assets/3d/island.glb';


const Island = ({isRotating, setIsRotating, setCurrentStage, ...props}) => {
  const islandRef = useRef();

  const { nodes, materials } = useGLTF(IslandScene)
  
  
  // now we have to get access to 3js rendered and viewport
  const {gl, viewport} = useThree(); // this is a hook


  // now we use a ref to get last mouse x-position 
  const lastX = useRef(0);

  // Use a ref for rotation speed
  const rotationSpeed = useRef(0);

  // now going to use a damping factor, this plays a role of
  // how fast the island will rotate/move when you scroll it
  // and how much it moves after u've rotated
  const dampingFactor = 0.95;

// ===============================================================================================================
  const handlePointerDown = (e) => {
    // this means that the mouse will not affect other elements/functions
    // on the screen, and only do what the func tells
    e.stopPropagation();
    e.preventDefault(); // so that it doesn't reload or does something else
    setIsRotating(true);

    // so now we will check if the user is on screen or PC using a mouse
    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    
    // last pos of the X, store it here
    lastX.current = clientX;
  }

  const handlePointerUp = (e) => {
    e.stopPropagation();
    e.preventDefault(); 
    setIsRotating(false);
  }

  const handlePointerMove = (e) => {
    e.stopPropagation();
    e.preventDefault();

    if (isRotating)
    {
      // so now we will check if the user is on screen or PC using a mouse
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;

      // checking the change in horizontal pos
      const delta = (clientX - lastX.current) / viewport.width;

      // we wanna update the island's rotation based on the mouse
      islandRef.current.rotation.y += delta * 0.01 * Math.PI;

      // Update the reference for the last clientX position
      lastX.current = clientX;

      // Update the rotation speed
      rotationSpeed.current = delta * 0.0008 * Math.PI;
    }
  }

  const handleKeyDown = (e) => {
    if (e.key === "ArrowLeft")
    {
      if (!isRotating) setIsRotating(true);

      islandRef.current.rotation.y += 0.01 * Math.PI; // --------------- CHECK LATER --------------
    }

    if (e.key === "ArrowRight")
    {
      if (!isRotating) setIsRotating(true);

      islandRef.current.rotation.y -= 0.01 * Math.PI;  // --------------- CHECK LATER --------------
    }
  }

  const handleKeyUp = (e) => {
    if (e.key === "ArrowLeft" || e.key === "ArrowRight")
    {
      setIsRotating(false);
    }
  }

// ===============================================================================================================

  // a lot of these things wont change (functions), but its good practice to use them
  useEffect(() => {
    // we're not touching the regular dom, we're touching the 3js rendered dom
    const canvas = gl.domElement; 

    canvas.addEventListener('pointerdown', handlePointerDown);
    canvas.addEventListener('pointerup', handlePointerUp);
    canvas.addEventListener('pointermove', handlePointerMove);
    document.addEventListener('keydown', handleKeyDown);
    document.addEventListener('keyup', handleKeyUp);
    
    return () => {
      canvas.removeEventListener('pointerdown', handlePointerDown);
      canvas.removeEventListener('pointerup', handlePointerUp);
      canvas.removeEventListener('pointermove', handlePointerMove);
      document.removeEventListener('keydown', handleKeyDown);
      document.removeEventListener('keyup', handleKeyUp);
    };
  
  }, [gl,handlePointerDown,handlePointerUp,handlePointerMove]);

// ===============================================================================================================

  // this is a hook that runs every frame of the app 
  useFrame(() => {
    if (!isRotating) {
      rotationSpeed.current *= dampingFactor;

      if (Math.abs(rotationSpeed.current) < 0.001) { // if the speed becomes less than this, its gonna stop
        rotationSpeed.current = 0;
      }
      
      islandRef.current.rotation.y += rotationSpeed.current;
    } 
    
    else {
      // When rotating, determine the current stage based on island's orientation
      const rotation = islandRef.current.rotation.y;

      /**
       * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
       * The goal is to ensure that the rotation value remains within a specific range to
       * prevent potential issues with very large or negative rotation values.
       *  Here's a step-by-step explanation of what this code does:
       *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
       *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
       *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
       *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
       *     This is done to ensure that the value remains positive and within the range of
       *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
       *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
       *     modulo operation to the value obtained in step 2. This step guarantees that the value
       *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
       *     circle in radians.
       */
      const normalizedRotation = ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);


      // Set the current stage based on the island's orientation, and stop at different stages
      switch (true) {
        case normalizedRotation >= 5.45 && normalizedRotation <= 5.85:
          setCurrentStage(4);
          break;
        case normalizedRotation >= 0.85 && normalizedRotation <= 1.3:
          setCurrentStage(3);
          break;
        case normalizedRotation >= 2.4 && normalizedRotation <= 2.6:
          setCurrentStage(2);
          break;
        case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
          setCurrentStage(1);
          break;
        default:
          setCurrentStage(null);
      }
    }
  });

// ===============================================================================================================
// ==============================================================================================================

  return (
    
    // idk why a.group --> this comes from react-spring 
    // ==> which enables animations... the 
    // a means animated
    
    <a.group ref = {islandRef} {...props}>
      <mesh
        geometry={nodes.polySurface944_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface945_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface946_tree2_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface947_tree1_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface948_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.polySurface949_tree_body_0.geometry}
        material={materials.PaletteMaterial001}
      />
      <mesh
        geometry={nodes.pCube11_rocks1_0.geometry}
        material={materials.PaletteMaterial001}
      />
    </a.group>
  )
}

export default Island;